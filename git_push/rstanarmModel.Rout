
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #### ---- Project: APHRC Wash Data ----
> #### ---- Task: Simulation ----
> #### ---- Fit joint model ----
> #### ---- By: Steve and Jonathan ----
> #### ---- Date: 2019 Jul 04 (Thu) ----
> 
> library(dplyr)
> library(tidyr)
> library(tibble)
> library(ggplot2)
> library(rstanarm)
> 
> options(dplyr.width = Inf)
> 
> theme_set(theme_bw() + theme(panel.spacing=grid::unit(0,"lines")))
> 
> load("simulateHierarchicalmvn.rda")
> set.seed(7777)
> 
> # Objects in
> # * sim_dflist
> # * betas_df
> # * betas
> # * x
> 
> nsims <- length(sim_dflist)
> 
> report <- 1 # Index within nsims to save for summary
> rstanmodel_list <- list() 
> rstancoef_list <- list()
> for (s in 1:nsims){
+    df <- (sim_dflist[[s]]
+       %>% data.frame()
+    )
+ 	model <- stan_mvmer(
+ 		formula = list(
+ 			y1 ~ x + (1 | id)
+ 			, y2 ~ x + (1 | id)
+ 			, y3 ~ x + (1 | id)
+ 		)
+ 		, data = sim_dflist[[1]]
+ 		, family = list(gaussian, gaussian, gaussian)
+ 		, refresh = 0
+ 		, chains = parallel::detectCores()
+ 		, cores = parallel::detectCores()
+ 		, seed = 7777
+ 		, iter = 1000
+ 	)
+ 	if (s <= report){
+ 		rstanmodel_list[[s]] <- model # Model to store
+ 	}
+ 	rstancoef_list[[s]] <- fixef(model)
+ }
Fitting a multivariate glmer model.

Please note the warmup may be much slower than later iterations!
> 
> # Print results
> rstancoef_df <- Reduce(rbind, rstancoef_list) %>% as_tibble()
> print(betas_df)
       coef betas  n
1  cor_y1y2   0.2 12
2  cor_y1y3   0.3 13
3  cor_y2y3   0.5 23
4     x:y10   0.3 10
5     x:y11   0.4 11
6     y1_sd   0.5  1
7     x:y20   0.3 20
8     x:y21   0.8 21
9     y2_sd   0.3  2
10    x:y30   0.4 30
11    x:y31   0.5 31
12    y3_sd   0.7  3
> print(rstancoef_df)
# A tibble: 2 x 3
     y1    y2    y3
  <dbl> <dbl> <dbl>
1 0.299 0.297 0.386
2 0.395 0.786 0.466
> 
> summary(rstanmodel_list[[1]])

Model Info:

 function:     stan_mvmer
 formula (y1): y1 ~ x + (1 | id)
 family  (y1): gaussian [identity]
 formula (y2): y2 ~ x + (1 | id)
 family  (y2): gaussian [identity]
 formula (y3): y3 ~ x + (1 | id)
 family  (y3): gaussian [identity]
 algorithm:    sampling
 priors:       see help('prior_summary')
 sample:       4000 (posterior sample size)
 num obs:      3000 (y1), 3000 (y2), 3000 (y3)
 groups:       id (100)
 runtime:      4.4 mins

Estimates:
                                          mean      sd        2.5%      25%    
y1|(Intercept)                              0.298     0.053     0.192     0.264
y1|x                                        0.395     0.010     0.376     0.388
y1|sigma                                    0.519     0.007     0.507     0.515
y1|mean_PPD                                 0.310     0.013     0.285     0.301
y2|(Intercept)                              0.297     0.030     0.236     0.278
y2|x                                        0.786     0.006     0.774     0.782
y2|sigma                                    0.309     0.004     0.301     0.306
y2|mean_PPD                                 0.318     0.008     0.303     0.313
y3|(Intercept)                              0.387     0.073     0.248     0.338
y3|x                                        0.466     0.013     0.441     0.457
y3|sigma                                    0.711     0.009     0.693     0.705
y3|mean_PPD                                 0.401     0.018     0.365     0.388
Sigma[id:y1|(Intercept),y1|(Intercept)]     0.251     0.038     0.188     0.224
Sigma[id:y2|(Intercept),y1|(Intercept)]     0.033     0.017     0.002     0.021
Sigma[id:y3|(Intercept),y1|(Intercept)]     0.115     0.040     0.042     0.089
Sigma[id:y2|(Intercept),y2|(Intercept)]     0.094     0.014     0.070     0.083
Sigma[id:y3|(Intercept),y2|(Intercept)]     0.112     0.026     0.069     0.093
Sigma[id:y3|(Intercept),y3|(Intercept)]     0.518     0.077     0.391     0.462
log-posterior                           -6718.530    18.173 -6755.094 -6730.778
                                          50%       75%       97.5%  
y1|(Intercept)                              0.299     0.335     0.398
y1|x                                        0.395     0.401     0.414
y1|sigma                                    0.519     0.524     0.533
y1|mean_PPD                                 0.310     0.319     0.337
y2|(Intercept)                              0.297     0.317     0.357
y2|x                                        0.786     0.789     0.796
y2|sigma                                    0.308     0.311     0.317
y2|mean_PPD                                 0.318     0.324     0.334
y3|(Intercept)                              0.386     0.436     0.529
y3|x                                        0.466     0.474     0.491
y3|sigma                                    0.711     0.717     0.729
y3|mean_PPD                                 0.401     0.413     0.436
Sigma[id:y1|(Intercept),y1|(Intercept)]     0.248     0.275     0.335
Sigma[id:y2|(Intercept),y1|(Intercept)]     0.032     0.044     0.069
Sigma[id:y3|(Intercept),y1|(Intercept)]     0.113     0.138     0.202
Sigma[id:y2|(Intercept),y2|(Intercept)]     0.092     0.102     0.127
Sigma[id:y3|(Intercept),y2|(Intercept)]     0.110     0.129     0.167
Sigma[id:y3|(Intercept),y3|(Intercept)]     0.512     0.567     0.689
log-posterior                           -6718.336 -6706.072 -6683.931

Diagnostics:
                                        mcse  Rhat  n_eff
y1|(Intercept)                          0.004 1.044  210 
y1|x                                    0.000 0.999 8707 
y1|sigma                                0.000 1.000 6377 
y1|mean_PPD                             0.000 0.999 4091 
y2|(Intercept)                          0.002 1.024  287 
y2|x                                    0.000 1.000 4082 
y2|sigma                                0.000 1.000 7416 
y2|mean_PPD                             0.000 1.000 3890 
y3|(Intercept)                          0.004 1.020  279 
y3|x                                    0.000 0.999 8582 
y3|sigma                                0.000 0.999 8731 
y3|mean_PPD                             0.000 1.000 3493 
Sigma[id:y1|(Intercept),y1|(Intercept)] 0.002 1.022  474 
Sigma[id:y2|(Intercept),y1|(Intercept)] 0.001 1.023  274 
Sigma[id:y3|(Intercept),y1|(Intercept)] 0.002 1.033  313 
Sigma[id:y2|(Intercept),y2|(Intercept)] 0.001 1.015  348 
Sigma[id:y3|(Intercept),y2|(Intercept)] 0.001 1.014  417 
Sigma[id:y3|(Intercept),y3|(Intercept)] 0.003 1.009  546 
log-posterior                           0.765 1.019  564 

For each parameter, mcse is Monte Carlo standard error, n_eff is a crude measure of effective sample size, and Rhat is the potential scale reduction factor on split chains (at convergence Rhat=1).
> 
> 
> VarCorr(rstanmodel_list[[1]])
 Groups Name           Std.Dev. Corr       
 id     y1|(Intercept) 0.50134             
        y2|(Intercept) 0.30582  0.214      
        y3|(Intercept) 0.72005  0.318 0.509
> 
> save(file = "rstanarmModel.rda"
+ 	, rstanmodel_list
+ 	, rstancoef_df
+ 	, betas_df
+ 	, betas
+ )
> 
> 
