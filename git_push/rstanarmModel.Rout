
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #### ---- Project: APHRC Wash Data ----
> #### ---- Task: Simulation ----
> #### ---- Fit joint model ----
> #### ---- By: Steve and Jonathan ----
> #### ---- Date: 2019 Jul 04 (Thu) ----
> 
> library(dplyr)
> library(tidyr)
> library(tibble)
> library(ggplot2)
> library(rstanarm)
> 
> options(dplyr.width = Inf)
> 
> theme_set(theme_bw() + theme(panel.spacing=grid::unit(0,"lines")))
> 
> load("simulateHierarchicalmvn.rda")
> set.seed(7777)
> 
> # Objects in
> # * sim_dflist
> # * betas_df
> # * betas
> # * x
> 
> nsims <- length(sim_dflist)
> 
> report <- 1 # Index within nsims to save for summary
> rstanmodel_list <- list() 
> rstancoef_list <- list()
> for (s in 1:nsims){
+    df <- (sim_dflist[[s]]
+       %>% data.frame()
+    )
+ 	model <- stan_mvmer(
+ 		formula = list(
+ 			y1 ~ x + (1 | id)
+ 			, y2 ~ x + (1 | id)
+ 			, y3 ~ x + (1 | id)
+ 		)
+ 		, data = sim_dflist[[1]]
+ 		, family = list(gaussian, gaussian, gaussian)
+ 		, refresh = 0
+ 		, chains = parallel::detectCores()
+ 		, cores = parallel::detectCores()
+ 		, seed = 7777
+ 		, iter = 1000
+ 	)
+ 	if (s <= report){
+ 		rstanmodel_list[[s]] <- model # Model to store
+ 	}
+ 	rstancoef_list[[s]] <- fixef(model)
+ }
Fitting a multivariate glmer model.

Please note the warmup may be much slower than later iterations!
> 
> # Print results
> rstancoef_df <- Reduce(rbind, rstancoef_list) %>% as_tibble()
> print(betas_df)
       coef betas  n
1  cor_y1y2   0.2 12
2  cor_y1y3   0.3 13
3  cor_y2y3   0.5 23
4     x:y10   0.3 10
5     x:y11   0.4 11
6     y1_sd   0.5  1
7     x:y20   0.3 20
8     x:y21   0.8 21
9     y2_sd   0.3  2
10    x:y30   0.4 30
11    x:y31   0.5 31
12    y3_sd   0.7  3
> print(rstancoef_df)
# A tibble: 2 x 3
     y1    y2    y3
  <dbl> <dbl> <dbl>
1 0.302 0.299 0.397
2 0.425 0.809 0.482
> 
> summary(rstanmodel_list[[1]])

Model Info:

 function:     stan_mvmer
 formula (y1): y1 ~ x + (1 | id)
 family  (y1): gaussian [identity]
 formula (y2): y2 ~ x + (1 | id)
 family  (y2): gaussian [identity]
 formula (y3): y3 ~ x + (1 | id)
 family  (y3): gaussian [identity]
 algorithm:    sampling
 priors:       see help('prior_summary')
 sample:       4000 (posterior sample size)
 num obs:      1000 (y1), 1000 (y2), 1000 (y3)
 groups:       id (100)
 runtime:      1.4 mins

Estimates:
                                          mean      sd        2.5%      25%    
y1|(Intercept)                              0.302     0.016     0.270     0.291
y1|x                                        0.425     0.015     0.395     0.414
y1|sigma                                    0.490     0.011     0.469     0.483
y1|mean_PPD                                 0.340     0.022     0.296     0.325
y2|(Intercept)                              0.299     0.010     0.280     0.292
y2|x                                        0.809     0.009     0.792     0.803
y2|sigma                                    0.294     0.007     0.282     0.290
y2|mean_PPD                                 0.371     0.013     0.345     0.362
y3|(Intercept)                              0.397     0.023     0.351     0.382
y3|x                                        0.482     0.021     0.439     0.468
y3|sigma                                    0.686     0.016     0.656     0.675
y3|mean_PPD                                 0.440     0.031     0.381     0.420
Sigma[id:y1|(Intercept),y1|(Intercept)]     0.002     0.002     0.000     0.000
Sigma[id:y2|(Intercept),y1|(Intercept)]     0.001     0.001     0.000     0.000
Sigma[id:y3|(Intercept),y1|(Intercept)]     0.002     0.003     0.000     0.000
Sigma[id:y2|(Intercept),y2|(Intercept)]     0.001     0.001     0.000     0.000
Sigma[id:y3|(Intercept),y2|(Intercept)]     0.002     0.002     0.000     0.000
Sigma[id:y3|(Intercept),y3|(Intercept)]     0.007     0.006     0.000     0.002
log-posterior                           -2415.841    16.835 -2449.396 -2426.985
                                          50%       75%       97.5%  
y1|(Intercept)                              0.302     0.312     0.335
y1|x                                        0.425     0.435     0.454
y1|sigma                                    0.490     0.498     0.512
y1|mean_PPD                                 0.340     0.355     0.384
y2|(Intercept)                              0.299     0.305     0.318
y2|x                                        0.809     0.816     0.827
y2|sigma                                    0.294     0.299     0.309
y2|mean_PPD                                 0.371     0.380     0.396
y3|(Intercept)                              0.397     0.413     0.443
y3|x                                        0.482     0.496     0.522
y3|sigma                                    0.686     0.696     0.717
y3|mean_PPD                                 0.441     0.461     0.500
Sigma[id:y1|(Intercept),y1|(Intercept)]     0.002     0.003     0.008
Sigma[id:y2|(Intercept),y1|(Intercept)]     0.000     0.001     0.003
Sigma[id:y3|(Intercept),y1|(Intercept)]     0.001     0.004     0.008
Sigma[id:y2|(Intercept),y2|(Intercept)]     0.001     0.001     0.003
Sigma[id:y3|(Intercept),y2|(Intercept)]     0.001     0.003     0.006
Sigma[id:y3|(Intercept),y3|(Intercept)]     0.006     0.011     0.021
log-posterior                           -2415.788 -2404.518 -2383.601

Diagnostics:
                                        mcse  Rhat  n_eff
y1|(Intercept)                          0.000 0.999 8340 
y1|x                                    0.000 0.999 8014 
y1|sigma                                0.000 0.999 6188 
y1|mean_PPD                             0.000 0.999 5755 
y2|(Intercept)                          0.000 0.999 6756 
y2|x                                    0.000 0.999 6506 
y2|sigma                                0.000 0.999 6915 
y2|mean_PPD                             0.000 1.000 4874 
y3|(Intercept)                          0.000 0.999 7312 
y3|x                                    0.000 0.999 8753 
y3|sigma                                0.000 0.999 6915 
y3|mean_PPD                             0.000 0.999 5524 
Sigma[id:y1|(Intercept),y1|(Intercept)] 0.000 1.002 1217 
Sigma[id:y2|(Intercept),y1|(Intercept)] 0.000 1.005  937 
Sigma[id:y3|(Intercept),y1|(Intercept)] 0.000 1.002  809 
Sigma[id:y2|(Intercept),y2|(Intercept)] 0.000 1.002 1195 
Sigma[id:y3|(Intercept),y2|(Intercept)] 0.000 1.003  806 
Sigma[id:y3|(Intercept),y3|(Intercept)] 0.000 1.001  882 
log-posterior                           0.640 1.010  691 

For each parameter, mcse is Monte Carlo standard error, n_eff is a crude measure of effective sample size, and Rhat is the potential scale reduction factor on split chains (at convergence Rhat=1).
> 
> 
> VarCorr(rstanmodel_list[[1]])
 Groups Name           Std.Dev. Corr       
 id     y1|(Intercept) 0.047054            
        y2|(Intercept) 0.030117 0.498      
        y3|(Intercept) 0.084125 0.564 0.637
> 
> save(file = "rstanarmModel.rda"
+ 	, rstanmodel_list
+ 	, rstancoef_df
+ 	, betas_df
+ 	, betas
+ )
> 
> 
