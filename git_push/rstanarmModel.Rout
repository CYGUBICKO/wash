
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #### ---- Project: APHRC Wash Data ----
> #### ---- Task: Simulation ----
> #### ---- Fit joint model ----
> #### ---- By: Steve and Jonathan ----
> #### ---- Date: 2019 Jul 04 (Thu) ----
> 
> library(dplyr)
> library(tidyr)
> library(tibble)
> library(ggplot2)
> library(rstanarm)
> 
> options(dplyr.width = Inf)
> 
> theme_set(theme_bw() + theme(panel.spacing=grid::unit(0,"lines")))
> 
> load("simulateHierarchicalmvn.rda")
> set.seed(7777)
> 
> # Objects in
> # * sim_dflist
> # * betas_df
> # * betas
> # * x
> 
> nsims <- length(sim_dflist)
> 
> report <- 1 # Index within nsims to save for summary
> rstanmodel_list <- list() 
> rstancoef_list <- list()
> for (s in 1:nsims){
+    df <- (sim_dflist[[s]]
+       %>% data.frame()
+    )
+ 	model <- stan_mvmer(
+ 		formula = list(
+ 			y1 ~ x + (1 | id)
+ 			, y2 ~ x + (1 | id)
+ 			, y3 ~ x + (1 | id)
+ 		)
+ 		, data = sim_dflist[[1]]
+ 		, family = list(gaussian, gaussian, gaussian)
+ 		, refresh = 0
+ 		, chains = parallel::detectCores()
+ 		, cores = parallel::detectCores()
+ 		, seed = 7777
+ 		, iter = 1000
+ 	)
+ 	if (s <= report){
+ 		rstanmodel_list[[s]] <- model # Model to store
+ 	}
+ 	rstancoef_list[[s]] <- fixef(model)
+ }
Fitting a multivariate glmer model.

Please note the warmup may be much slower than later iterations!
> 
> # Print results
> rstancoef_df <- Reduce(rbind, rstancoef_list) %>% as_tibble()
> print(betas_df)
       coef betas  n
1  cor_y1y2   0.2 12
2  cor_y1y3   0.3 13
3  cor_y2y3   0.5 23
4     x:y10   0.3 10
5     x:y11   0.4 11
6     y1_sd   0.5  1
7     x:y20   0.3 20
8     x:y21   0.8 21
9     y2_sd   0.3  2
10    x:y30   0.4 30
11    x:y31   0.5 31
12    y3_sd   0.7  3
> print(rstancoef_df)
# A tibble: 2 x 3
     y1    y2    y3
  <dbl> <dbl> <dbl>
1 0.296 0.293 0.391
2 0.397 0.791 0.495
> 
> summary(rstanmodel_list[[1]])

Model Info:

 function:     stan_mvmer
 formula (y1): y1 ~ x + (1 | id)
 family  (y1): gaussian [identity]
 formula (y2): y2 ~ x + (1 | id)
 family  (y2): gaussian [identity]
 formula (y3): y3 ~ x + (1 | id)
 family  (y3): gaussian [identity]
 algorithm:    sampling
 priors:       see help('prior_summary')
 sample:       4000 (posterior sample size)
 num obs:      6000 (y1), 6000 (y2), 6000 (y3)
 groups:       id (200)
 runtime:      15.9 mins

Estimates:
                                          mean       sd         2.5%    
y1|(Intercept)                               0.296      0.035      0.227
y1|x                                         0.397      0.006      0.385
y1|sigma                                     0.498      0.005      0.489
y1|mean_PPD                                  0.296      0.009      0.278
y2|(Intercept)                               0.294      0.022      0.251
y2|x                                         0.791      0.004      0.783
y2|sigma                                     0.300      0.003      0.294
y2|mean_PPD                                  0.300      0.005      0.290
y3|(Intercept)                               0.391      0.052      0.289
y3|x                                         0.495      0.009      0.477
y3|sigma                                     0.712      0.007      0.699
y3|mean_PPD                                  0.392      0.013      0.367
Sigma[id:y1|(Intercept),y1|(Intercept)]      0.268      0.028      0.219
Sigma[id:y2|(Intercept),y1|(Intercept)]      0.033      0.011      0.012
Sigma[id:y3|(Intercept),y1|(Intercept)]      0.115      0.027      0.064
Sigma[id:y2|(Intercept),y2|(Intercept)]      0.089      0.010      0.073
Sigma[id:y3|(Intercept),y2|(Intercept)]      0.113      0.018      0.082
Sigma[id:y3|(Intercept),y3|(Intercept)]      0.502      0.053      0.407
log-posterior                           -12969.656     25.314 -13019.325
                                          25%        50%        75%     
y1|(Intercept)                               0.271      0.296      0.318
y1|x                                         0.393      0.397      0.401
y1|sigma                                     0.495      0.498      0.501
y1|mean_PPD                                  0.290      0.296      0.302
y2|(Intercept)                               0.279      0.293      0.308
y2|x                                         0.788      0.791      0.793
y2|sigma                                     0.298      0.300      0.301
y2|mean_PPD                                  0.297      0.300      0.304
y3|(Intercept)                               0.357      0.391      0.425
y3|x                                         0.489      0.495      0.501
y3|sigma                                     0.707      0.712      0.716
y3|mean_PPD                                  0.384      0.392      0.401
Sigma[id:y1|(Intercept),y1|(Intercept)]      0.248      0.267      0.286
Sigma[id:y2|(Intercept),y1|(Intercept)]      0.026      0.033      0.040
Sigma[id:y3|(Intercept),y1|(Intercept)]      0.097      0.114      0.134
Sigma[id:y2|(Intercept),y2|(Intercept)]      0.082      0.088      0.095
Sigma[id:y3|(Intercept),y2|(Intercept)]      0.099      0.111      0.124
Sigma[id:y3|(Intercept),y3|(Intercept)]      0.463      0.498      0.535
log-posterior                           -12986.690 -12969.408 -12952.600
                                          97.5%   
y1|(Intercept)                               0.366
y1|x                                         0.410
y1|sigma                                     0.507
y1|mean_PPD                                  0.314
y2|(Intercept)                               0.340
y2|x                                         0.798
y2|sigma                                     0.305
y2|mean_PPD                                  0.311
y3|(Intercept)                               0.498
y3|x                                         0.513
y3|sigma                                     0.725
y3|mean_PPD                                  0.417
Sigma[id:y1|(Intercept),y1|(Intercept)]      0.326
Sigma[id:y2|(Intercept),y1|(Intercept)]      0.057
Sigma[id:y3|(Intercept),y1|(Intercept)]      0.173
Sigma[id:y2|(Intercept),y2|(Intercept)]      0.112
Sigma[id:y3|(Intercept),y2|(Intercept)]      0.151
Sigma[id:y3|(Intercept),y3|(Intercept)]      0.614
log-posterior                           -12920.633

Diagnostics:
                                        mcse  Rhat  n_eff
y1|(Intercept)                          0.003 1.055  180 
y1|x                                    0.000 0.999 6609 
y1|sigma                                0.000 0.999 8362 
y1|mean_PPD                             0.000 1.002 3832 
y2|(Intercept)                          0.002 1.055  170 
y2|x                                    0.000 1.000 3406 
y2|sigma                                0.000 0.999 7943 
y2|mean_PPD                             0.000 1.002 4051 
y3|(Intercept)                          0.004 1.065  175 
y3|x                                    0.000 0.999 6069 
y3|sigma                                0.000 0.999 7272 
y3|mean_PPD                             0.000 0.999 3948 
Sigma[id:y1|(Intercept),y1|(Intercept)] 0.001 1.021  394 
Sigma[id:y2|(Intercept),y1|(Intercept)] 0.001 1.046  240 
Sigma[id:y3|(Intercept),y1|(Intercept)] 0.001 1.017  418 
Sigma[id:y2|(Intercept),y2|(Intercept)] 0.001 1.037  252 
Sigma[id:y3|(Intercept),y2|(Intercept)] 0.001 1.029  260 
Sigma[id:y3|(Intercept),y3|(Intercept)] 0.003 1.010  450 
log-posterior                           1.153 1.011  482 

For each parameter, mcse is Monte Carlo standard error, n_eff is a crude measure of effective sample size, and Rhat is the potential scale reduction factor on split chains (at convergence Rhat=1).
> 
> 
> VarCorr(rstanmodel_list[[1]])
 Groups Name           Std.Dev. Corr       
 id     y1|(Intercept) 0.51775             
        y2|(Intercept) 0.29883  0.216      
        y3|(Intercept) 0.70826  0.315 0.532
> 
> save(file = "rstanarmModel.rda"
+ 	, rstanmodel_list
+ 	, rstancoef_df
+ 	, betas_df
+ 	, betas
+ )
> 
> 
